define ECS_LOADER_H

include
{
    "Ecs/Ecs.h"
}

include
{
    "Components/Animator.h",
    "Components/Transform.h",
    "Components/RigidBody.h",
    "Components/Sprite.h",
    "Components/Movement.h",
    "Components/CameraController.h",
    "Components/Inventory.h",
    "Components/Interaction.h"
}

enum DataComponentType
{
    [ COMPONENT_TRANSFORM,      sizeof(Transform),          NULL ],
    [ COMPONENT_RIGID_BODY,     sizeof(RigidBody),          NULL ],
    [ COMPONENT_MOVEMENT,       sizeof(Movement),           NULL ],
    [ COMPONENT_SPRITE,         sizeof(Sprite),             NULL ],
    [ COMPONENT_ANIMATOR,       sizeof(Animator),           AnimatorFree ],
    [ COMPONENT_CAMERA,         sizeof(CameraController),   NULL ],
    [ COMPONENT_INVENTORY,      sizeof(Inventory),          InventoryFree ],
    [ COMPONENT_INTERACTION,    sizeof(Interaction),        NULL ],
    [ COMPONENT_INTERACTOR,     sizeof(Interactor),         NULL ]
}

generate RegisterDataComponents(Ecs* ecs): DataComponentType -> EcsRegisterDataComponent(ecs)

include
{
    "Components/Order.h"
}

enum OrderComponentType
{
    [ COMPONENT_TEMPLATE,   sizeof(Template),   TemplateCmp ],
    [ COMPONENT_Z_INDEX,    sizeof(ZIndex),     ZIndexCmp ]
}

generate RegisterOrderComponents(Ecs* ecs): OrderComponentType -> EcsRegisterOrderComponent(ecs)

include
{
    "Systems/PhysicsSystem.h",
    "Systems/PlayerSystem.h",
    "Systems/AnimationSystem.h",
    "Systems/InventorySystem.h",
    "Systems/InteractionSystem.h",
    "Systems/RenderSystem.h",
    "Systems/DebugRenderSystem.h"
}

enum UpdateSystemType
{
    [ UPDATE_PHYSICS,       PhysicsSystem ],
    [ UPDATE_PLAYER,        PlayerSystem ],
    [ UPDATE_ANIMATION,     AnimationSystem ],
    [ UPDATE_INVENTORY,     InventoryUpdateSystem ],
    [ UPDATE_INTERACTION,   InteractionSystem ]
}

enum RenderSystemType
{
    [ RENDER_SPRITE,    ECS_RENDER_STAGE_PRIMARY,   RenderSystem ],
    [ RENDER_DEBUG,     ECS_RENDER_STAGE_DEBUG,     DebugRenderSystem ],
    [ RENDER_INVENTORY, ECS_RENDER_STAGE_UI,        InventoryRenderSystem ]
}

generate AddUpdateSystems(Ecs* ecs): UpdateSystemType -> EcsAddUpdateSystem(ecs)
generate AddRenderSystems(Ecs* ecs): RenderSystemType -> EcsAddRenderSystem(ecs)

